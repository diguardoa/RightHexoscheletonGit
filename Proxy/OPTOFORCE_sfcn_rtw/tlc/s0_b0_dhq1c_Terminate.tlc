%implements s0_b0_dhq1c_Terminate "C"

%function Terminate(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl
B_OPTOFORCE_T *_rtB;
%closefile localVarDecl
%assign tlcTerminateFcnOfS0B0 = OpaqueTLCBlockFcn("Terminate", 0, 0, 0, 9)
%assign tlcTerminateFcnOfS0B3 = OpaqueTLCBlockFcn("Terminate", 0, 3, 0, 9)
%assign tlcCleanupRuntimeResourcesFcnOfS0B0 = OpaqueTLCBlockFcn("CleanupRuntimeResources", 0, 0, 0, 9)
%assign tlcCleanupRuntimeResourcesFcnOfS0B3 = OpaqueTLCBlockFcn("CleanupRuntimeResources", 0, 3, 0, 9)
_rtB = %<(SLibCG_SE(SLibGetBlockIOStructPtr()))>;
%if !WHITE_SPACE(tlcTerminateFcnOfS0B0)
/* Terminate for M-S-Function: '<S1>/Serial Receive' */
%<tlcTerminateFcnOfS0B0>\
%endif
%if !WHITE_SPACE(tlcTerminateFcnOfS0B3)
/* Terminate for M-S-Function: '<S1>/Serial Configuration1' */
%<tlcTerminateFcnOfS0B3>\
%endif
%if !WHITE_SPACE(tlcCleanupRuntimeResourcesFcnOfS0B0)
/* CleanupRuntimeResources for M-S-Function: '<S1>/Serial Receive' */
%<tlcCleanupRuntimeResourcesFcnOfS0B0>\
%endif
%if !WHITE_SPACE(tlcCleanupRuntimeResourcesFcnOfS0B3)
/* CleanupRuntimeResources for M-S-Function: '<S1>/Serial Configuration1' */
%<tlcCleanupRuntimeResourcesFcnOfS0B3>\
%endif
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[0].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Terminate", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Terminate"))
%<SLibCG_AccessArg(0, 9, 0)>
%endif
%if SLibCG_ArgAccessed(0, 9, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Terminate", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Terminate"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(0, 9, 0)>
%endif
%<LibSetSystemField(system, "CachedTerminateLocalVars", localVarDecl)>
%endfunction
%function TerminateFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Terminate(\
%assign comma = ""
%if SLibCG_ArgAccessed(0, 9, 0)
%<comma>%<::tSimStructType> *S\
%assign comma = ", "
%endif
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 9, fcnProtoType)>
%endfunction
