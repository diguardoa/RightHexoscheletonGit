%implements s0_b0_dhq1c_SystemInitialize "C"

%function SystemInitialize(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl
B_OPTOFORCE_T *_rtB;
%closefile localVarDecl
%assign tlcInitializeConditionsFcnOfS0B0 = OpaqueTLCBlockFcn("InitializeConditions", 0, 0, 0, 1)
%assign tlcInitializeConditionsFcnOfS0B3 = OpaqueTLCBlockFcn("InitializeConditions", 0, 3, 0, 1)
%<SLibInsertAsyncTaskInitializeCode(system)>
%<SLibWriteMachineInitialize()>
_rtB = %<(SLibCG_SE(SLibGetBlockIOStructPtr()))>;
%if !WHITE_SPACE(tlcInitializeConditionsFcnOfS0B0)
/* InitializeConditions for M-S-Function: '<S1>/Serial Receive' */
%<tlcInitializeConditionsFcnOfS0B0>\
%endif
%if !WHITE_SPACE(tlcInitializeConditionsFcnOfS0B3)
/* InitializeConditions for M-S-Function: '<S1>/Serial Configuration1' */
%<tlcInitializeConditionsFcnOfS0B3>\
%endif
/* InitializeConditions for Memory: '<S1>/Offset' */
%<SLibCG_SetDWV(1, 0, 0, 3, "", -1, "", 0, "0")>\
%<SLibCG_SetDWV(1, 0, 0, 3, "", -1, "", 1, "0")>\
%<SLibCG_SetDWV(1, 0, 0, 3, "", -1, "", 2, "32460")>\
%<SLibInsertInitPeriodicCStatesFcn(system)>
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[0].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("SystemInitialize", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "SystemInitialize"))
%<SLibCG_AccessArg(0, 1, 0)>
%endif
%if SLibCG_ArgAccessed(0, 1, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "SystemInitialize", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "SystemInitialize"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(0, 1, 0)>
%endif
%<LibSetSystemField(system, "CachedSystemInitializeLocalVars", localVarDecl)>
%endfunction
%function SystemInitializeFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void SystemInitialize(\
%assign comma = ""
%if SLibCG_ArgAccessed(0, 1, 0)
%<comma>%<::tSimStructType> *S\
%assign comma = ", "
%endif
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 1, fcnProtoType)>
%endfunction
